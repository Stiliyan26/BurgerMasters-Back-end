// <auto-generated />
using System;
using BurgerMasters.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BurgerMasters.Infrastructure.Migrations
{
    [DbContext(typeof(BurgerMastersDbContext))]
    partial class BurgerMastersDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BurgerMasters.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            AccessFailedCount = 0,
                            Address = "Street: 17, bul. Cherni vrah",
                            Birthdate = new DateTime(1998, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7bdcc602-1806-443f-9caa-62531d75257b",
                            Email = "stiliyan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STILIYAN@GMAIL.COM",
                            NormalizedUserName = "STILIYAN",
                            PasswordHash = "AQAAAAEAACcQAAAAEArYEuh3JCEhsAe8FEHRnJ48Xy1wNEFuQMpPkvQQuIgCuTfTLBaLtZmStip5wLRQNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "59b1d3b6-d4c6-426f-ae61-78ef9efd3ac8",
                            TwoFactorEnabled = false,
                            UserName = "Stiliyan26"
                        },
                        new
                        {
                            Id = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            AccessFailedCount = 0,
                            Address = "Street: 17, bul. Cherni vrah",
                            Birthdate = new DateTime(1998, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a87cffa7-7c11-47f8-9ce6-749185aee22e",
                            Email = "peter@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETER@GMAIL.COM",
                            NormalizedUserName = "PETER12",
                            PasswordHash = "AQAAAAEAACcQAAAAEN9JzoviNFkX1ATWjeNTvMtNrVKlAGG/GQSiXKkYFWhJsUDXPytoMvtuM0uIm3rXcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d8e9462-7002-49de-9e14-44fbc513b8dc",
                            TwoFactorEnabled = false,
                            UserName = "Peter12"
                        },
                        new
                        {
                            Id = "e130798b-a521-45ad-85df-b232eaaadc09",
                            AccessFailedCount = 0,
                            Address = "Street: 17, bul. Cherni vrah",
                            Birthdate = new DateTime(2003, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4557e9ab-74a6-4031-81ee-9bb4b9644dbf",
                            Email = "bogdan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOGDAN@GMAIL.COM",
                            NormalizedUserName = "BOGDAN16",
                            PasswordHash = "AQAAAAEAACcQAAAAEE7ChQFGNebk73g91SLo1WI0Zu3vt+K3F19ea4ETGpZQ/mWU53FTHYXLSgyOz5ab6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86818601-44b5-4ad0-b1c1-2e342cd80bc6",
                            TwoFactorEnabled = false,
                            UserName = "Bogdan16"
                        });
                });

            modelBuilder.Entity("BurgerMasters.Infrastructure.Data.Models.ApplicationUserMenuItem", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemQuantity")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId", "MenuItemId");

                    b.HasIndex("MenuItemId");

                    b.ToTable("ApplicationUserMenuItems");
                });

            modelBuilder.Entity("BurgerMasters.Infrastructure.Data.Models.ItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ItemTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Burger"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Drink"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fries"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hotdog"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Grill"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Salad"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sandwich"
                        });
                });

            modelBuilder.Entity("BurgerMasters.Infrastructure.Data.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PortionSize")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ItemTypeId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 42,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "Homemade Brioche Bread, Burger sauce, Black Angus ground beef mixed with cheddar, Melted Irish red cheddar, Crispy bacon, Caramelized onions",
                            ImageUrl = "JuicyLucy.webp",
                            IsActive = true,
                            ItemTypeId = 1,
                            Name = "THE JUICY LUCY",
                            PortionSize = 350,
                            Price = 17.40m
                        },
                        new
                        {
                            Id = 43,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "Homemade Brioche Bread, Pineapple butter with rum, 200g Black Angus ground beef, Grilled pineapple, Crispy bacon with brown sugar",
                            ImageUrl = "PineappleBaconRun.webp",
                            IsActive = true,
                            ItemTypeId = 1,
                            Name = "Pineapple Bacon Run",
                            PortionSize = 380,
                            Price = 19.40m
                        },
                        new
                        {
                            Id = 44,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "Homemade Brioche Bread, Burger sauce, Colsloe,Ground beef Black Angus x2, Melted Irish red cheddar x2, Crispy bacon, Homemade pickle, Caramelized onions",
                            ImageUrl = "RustySavage.webp",
                            IsActive = true,
                            ItemTypeId = 1,
                            Name = "RUSTY SAVAGE",
                            PortionSize = 630,
                            Price = 27.49m
                        },
                        new
                        {
                            Id = 45,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "Homemade Brioche Bread, Grilled onions, Thunder spicy sauce (tomato sauce, jalapeño, pickle, sweet apricot), Black Angus ground beef, Homemade cheddar sauce, Homemade pickle",
                            ImageUrl = "Tunder.webp",
                            IsActive = true,
                            ItemTypeId = 1,
                            Name = "THUNDER",
                            PortionSize = 380,
                            Price = 17.49m
                        },
                        new
                        {
                            Id = 46,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "Homemade Brioche Bread, Burger sauce, Iceberg, Black Angus ground beef, Crispy bacon, American cheese, Tomato, Pickled red onion",
                            ImageUrl = "American.webp",
                            IsActive = true,
                            ItemTypeId = 1,
                            Name = "American Cheese Burger",
                            PortionSize = 320,
                            Price = 14.99m
                        },
                        new
                        {
                            Id = 47,
                            CreatorId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            Description = "Homemade Brioche Bread, Black Angus ground beef, Aioli sauce, Shrimp, Iceberg",
                            ImageUrl = "SurfNTurff.webp",
                            IsActive = true,
                            ItemTypeId = 1,
                            Name = "Surf'n'Turf",
                            PortionSize = 370,
                            Price = 19.49m
                        },
                        new
                        {
                            Id = 48,
                            CreatorId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            Description = "Black Angus ground beef, American cheese, Cheddar, Jalapeno",
                            ImageUrl = "BurgerPie.webp",
                            IsActive = true,
                            ItemTypeId = 1,
                            Name = "Burger Pie",
                            PortionSize = 380,
                            Price = 19.49m
                        },
                        new
                        {
                            Id = 49,
                            CreatorId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            Description = "Black Angus ground beef, American cheese, Cheddar, Jalapeno",
                            ImageUrl = "BurgerPie.webp",
                            IsActive = true,
                            ItemTypeId = 1,
                            Name = "Burger Pie",
                            PortionSize = 380,
                            Price = 19.49m
                        },
                        new
                        {
                            Id = 50,
                            CreatorId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            Description = "Homemade Brioche Bread, Burger sauce, 200g Black Angus ground beef patties with brown sugar and whiskey, Smokey BBQ, Mushrooms with olive oil, onion and garlic, Crispy bacon, Very cheddar, Fresh tomato",
                            ImageUrl = "SmokeyWhiskeyCheeseburger.webp",
                            IsActive = true,
                            ItemTypeId = 1,
                            Name = "Smokey Whiskey Cheeseburger",
                            PortionSize = 480,
                            Price = 23.49m
                        },
                        new
                        {
                            Id = 51,
                            CreatorId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            Description = "Homemade Brioche Bread, BBQ sauce with bourbon, Our pickle, Black Angus ground beef with blue cheese, mozzarella and lots of cheddar, wrapped in bacon, Grilled onions",
                            ImageUrl = "TrippleCheese.webp",
                            IsActive = true,
                            ItemTypeId = 1,
                            Name = "Triple Cheeseburger",
                            PortionSize = 550,
                            Price = 23.49m
                        },
                        new
                        {
                            Id = 52,
                            CreatorId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            Description = "Homemade Brioche Bread, Homemade bourbon BBQ sauce, Crispy iceberg, Black Angus ground beef patties, Very cheddar, Bacon Apricot Marmalade",
                            ImageUrl = "BaconJam.webp",
                            IsActive = true,
                            ItemTypeId = 1,
                            Name = "Bacon Jam Burger",
                            PortionSize = 450,
                            Price = 19.49m
                        },
                        new
                        {
                            Id = 53,
                            CreatorId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            Description = "Homemade Brioche Bread, Colsloe, Slow Roasted Pork Shoulder, Caramelized onions, Melted cheddar, Homemade bourbon BBQ sauce",
                            ImageUrl = "BBQPulledPork.webp",
                            IsActive = true,
                            ItemTypeId = 1,
                            Name = "BBQ Pulled Pork",
                            PortionSize = 350,
                            Price = 14.40m
                        },
                        new
                        {
                            Id = 54,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "Homemade potatoes, Vegetable Oil, Salt",
                            ImageUrl = "RegularFries.webp",
                            IsActive = true,
                            ItemTypeId = 3,
                            Name = "Regular Fries",
                            PortionSize = 170,
                            Price = 4.99m
                        },
                        new
                        {
                            Id = 55,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "Homemade potatoes, Vegetable Oil, Salt, Homemade hot sauce",
                            ImageUrl = "SpicyFries.webp",
                            IsActive = true,
                            ItemTypeId = 3,
                            Name = "Spicy Fries",
                            PortionSize = 240,
                            Price = 6.99m
                        },
                        new
                        {
                            Id = 56,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "Homemade potatoes, Vegetable Oil, Salt, Pepper, House fried sauce and jalapenos",
                            ImageUrl = "CheddarFries.webp",
                            IsActive = true,
                            ItemTypeId = 3,
                            Name = "Cheddar Fries",
                            PortionSize = 300,
                            Price = 7.99m
                        },
                        new
                        {
                            Id = 57,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "Onions, Flour, Bread crumbs, Salt and pepper",
                            ImageUrl = "OnionRings.webp",
                            IsActive = true,
                            ItemTypeId = 3,
                            Name = "Breaded onion rings",
                            PortionSize = 250,
                            Price = 6.99m
                        },
                        new
                        {
                            Id = 58,
                            CreatorId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            Description = "Mozzarella cheese, Blueberry jam, All purpose flour",
                            ImageUrl = "MozzarellaSticks.webp",
                            IsActive = true,
                            ItemTypeId = 3,
                            Name = "Mozzarella sticks",
                            PortionSize = 170,
                            Price = 9.99m
                        },
                        new
                        {
                            Id = 59,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "Carbonated Water, Phosphoric Acid, Sweeteners (Aspartame, Acesulfame Potassium), Natural Flavors (including Caffeine)",
                            ImageUrl = "CocaColaNoSugar.webp",
                            IsActive = true,
                            ItemTypeId = 2,
                            Name = "Coca-Cola no sugar",
                            PortionSize = 330,
                            Price = 2.50m
                        },
                        new
                        {
                            Id = 60,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "Carbonated Water, High Fructose Corn Syrup, Caramel Color, Phosphoric Acid, Natural Flavors",
                            ImageUrl = "Classic.webp",
                            IsActive = true,
                            ItemTypeId = 2,
                            Name = "Coca-Cola Original",
                            PortionSize = 330,
                            Price = 2.50m
                        },
                        new
                        {
                            Id = 61,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "Carbonated Water, High Fructose Corn Syrup, Caramel Color, Phosphoric Acid, Potassium Benzoate",
                            ImageUrl = "CherryVanilla.webp",
                            IsActive = true,
                            ItemTypeId = 2,
                            Name = "Coca-cola cherry",
                            PortionSize = 355,
                            Price = 4.90m
                        },
                        new
                        {
                            Id = 62,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "Carbonated Water, High Fructose Corn Syrup, Caramel Color, Phosphoric Acid, Caffeine, Sodium Benzoat",
                            ImageUrl = "OrangeVanilla.webp",
                            IsActive = true,
                            ItemTypeId = 2,
                            Name = "Coca-cola orange vanilla",
                            PortionSize = 355,
                            Price = 4.90m
                        },
                        new
                        {
                            Id = 63,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "Carbonated Water, High Fructose Corn Syrup, Caramel Color, Phosphoric Acid, Natural Flavors (including Vanilla), Caffeine",
                            ImageUrl = "Vanilla.webp",
                            IsActive = true,
                            ItemTypeId = 2,
                            Name = "Coca-cola vanila",
                            PortionSize = 355,
                            Price = 4.90m
                        },
                        new
                        {
                            Id = 64,
                            CreatorId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            Description = "Carbonated Water, High Fructose Corn Syrup, Natural and Artificial Flavors, Citric Acid, Sodium Citrate, Red 40 (Color)",
                            ImageUrl = "FantaStrawberry.webp",
                            IsActive = true,
                            ItemTypeId = 2,
                            Name = "Fanta strawberry",
                            PortionSize = 355,
                            Price = 4.90m
                        },
                        new
                        {
                            Id = 65,
                            CreatorId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            Description = "Carbonated Water, High Fructose Corn Syrup, Citric Acid, Natural and Artificial Flavors, Red 40 (Color), Blue 1 (Color)",
                            ImageUrl = "FantaBerry.webp",
                            IsActive = true,
                            ItemTypeId = 2,
                            Name = "Fanta berry",
                            PortionSize = 355,
                            Price = 4.90m
                        },
                        new
                        {
                            Id = 66,
                            CreatorId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            Description = "Carbonated Water, High Fructose Corn Syrup, Natural and Artificial Flavors, Citric Acid, Sodium Benzoate, Red 40 (Color), Blue 1 (Color)",
                            ImageUrl = "FantaGrape.webp",
                            IsActive = true,
                            ItemTypeId = 2,
                            Name = "Fanta Grape",
                            PortionSize = 355,
                            Price = 4.90m
                        },
                        new
                        {
                            Id = 67,
                            CreatorId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            Description = "Carbonated Water, High Fructose Corn Syrup, Natural Flavors, Natural Flavors, Sodium Benzoate, Yellow 6 (Color), Red 40 (Color)",
                            ImageUrl = "FantaPeach.webp",
                            IsActive = true,
                            ItemTypeId = 2,
                            Name = "Fanta Peach",
                            PortionSize = 355,
                            Price = 4.90m
                        },
                        new
                        {
                            Id = 68,
                            CreatorId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            Description = "Carbonated Water, High Fructose Corn Syrup, Natural Flavors, Sodium Benzoat, Potassium Sorbate, Yellow 5 (Color), Yellow 5 (Color)",
                            ImageUrl = "FantaPineapple.webp",
                            IsActive = true,
                            ItemTypeId = 2,
                            Name = "Fanta Pineapple",
                            PortionSize = 355,
                            Price = 4.90m
                        },
                        new
                        {
                            Id = 69,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "Homemade bread, BBQ sauce, Grilled sausage with cheddar and bacon, Mustard, Onion, Oklahoma Mince, Homemade cheddar sauce",
                            ImageUrl = "Oklahoma.webp",
                            IsActive = true,
                            ItemTypeId = 4,
                            Name = "Old Style Oklahoma",
                            PortionSize = 200,
                            Price = 12.49m
                        },
                        new
                        {
                            Id = 70,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "Homemade Brioche Bread, Grilled beef sausage, Smoked bacon, Mustard, Pasta with American cheese",
                            ImageUrl = "MacNcheese.webp",
                            IsActive = true,
                            ItemTypeId = 4,
                            Name = "Old Style Mac'n'cheese",
                            PortionSize = 200,
                            Price = 11.49m
                        },
                        new
                        {
                            Id = 71,
                            CreatorId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            Description = "Homemade brioche bread, Smoked pork sausage, Smoked bacon, Coleslaw salad, BBQ sauce, Mustard",
                            ImageUrl = "Mineapolis.webp",
                            IsActive = true,
                            ItemTypeId = 4,
                            Name = "Old Style Mineapolis",
                            PortionSize = 200,
                            Price = 11.49m
                        },
                        new
                        {
                            Id = 72,
                            CreatorId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            Description = "Beef sausage breaded with cornmeal, egg, mustard and honey, Coleslaw salad, Mustard",
                            ImageUrl = "CornDog.webp",
                            IsActive = true,
                            ItemTypeId = 4,
                            Name = "CornDog",
                            PortionSize = 250,
                            Price = 11.49m
                        },
                        new
                        {
                            Id = 73,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "160 g of Black Angus ground beef, Spicy beans with bacon, molasses and spices, Coleslaw",
                            ImageUrl = "BlackAngus.webp",
                            IsActive = true,
                            ItemTypeId = 5,
                            Name = "Black Angus Grill",
                            PortionSize = 460,
                            Price = 18.90m
                        },
                        new
                        {
                            Id = 74,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "2 smoked pork sausages, Spicy beans with bacon, molasses and spices, Coleslaw",
                            ImageUrl = "PorkSausage.webp",
                            IsActive = true,
                            ItemTypeId = 5,
                            Name = "Smoked pork sausage",
                            PortionSize = 400,
                            Price = 19.10m
                        },
                        new
                        {
                            Id = 75,
                            CreatorId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            Description = "2 patties of 160g each. from Black Angus ground beef, Spicy beans with bacon, molasses and spices, Coleslaw",
                            ImageUrl = "BlackAngus2.webp",
                            IsActive = true,
                            ItemTypeId = 5,
                            Name = "Double Black Angus Gril",
                            PortionSize = 640,
                            Price = 23.90m
                        },
                        new
                        {
                            Id = 76,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "Red cabbage,White Cabbage,Carrot,Mayonnaise dressing",
                            ImageUrl = "Coleslaw.webp",
                            IsActive = true,
                            ItemTypeId = 6,
                            Name = "Salad Coleslaw",
                            PortionSize = 250,
                            Price = 5.99m
                        },
                        new
                        {
                            Id = 77,
                            CreatorId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            Description = "Lettuce,Tomato,Blue cheese,Avocado,Chicken fillet,Bacon,Quail eggs,Red onion,Dressing",
                            ImageUrl = "Cobb.webp",
                            IsActive = true,
                            ItemTypeId = 6,
                            Name = "Salad Cobb",
                            PortionSize = 400,
                            Price = 14.90m
                        },
                        new
                        {
                            Id = 78,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "Homemade American bread toasted with butter, Breaded sirloin (pork), Mustard, White onion, Colsloe, Tomato",
                            ImageUrl = "FiredPork.webp",
                            IsActive = true,
                            ItemTypeId = 7,
                            Name = "Fried Pork Priviledge",
                            PortionSize = 390,
                            Price = 13.90m
                        },
                        new
                        {
                            Id = 79,
                            CreatorId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            Description = "Homemade Brioche Bread, American potato salad with mustard and bacon, Ground beef with Sloppy Joe sauce",
                            ImageUrl = "SloppyJoe.webp",
                            IsActive = true,
                            ItemTypeId = 7,
                            Name = "Sloppy Joe",
                            PortionSize = 320,
                            Price = 11.49m
                        },
                        new
                        {
                            Id = 80,
                            CreatorId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            Description = "Homemade Brioche Bread, Coleslaw, Crispy bacon, BBQ sauce with bourbon, Caramelized onions",
                            ImageUrl = "RustyBacon.webp",
                            IsActive = true,
                            ItemTypeId = 7,
                            Name = "Rusty Bacon",
                            PortionSize = 380,
                            Price = 9.99m
                        },
                        new
                        {
                            Id = 81,
                            CreatorId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            Description = "Toast slices with smoked mayonnaise, pan-fried, Lettuce, Tomato",
                            ImageUrl = "ScrambledEggs.webp",
                            IsActive = true,
                            ItemTypeId = 7,
                            Name = "Scrambled eggs with bacon",
                            PortionSize = 270,
                            Price = 10.99m
                        },
                        new
                        {
                            Id = 82,
                            CreatorId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            Description = "Toast slices with smoked mayonnaise, pan-fried, Cheddar, Mozzarella",
                            ImageUrl = "GrillnCheese.webp",
                            IsActive = true,
                            ItemTypeId = 7,
                            Name = "American Grill and Cheese",
                            PortionSize = 200,
                            Price = 10.09m
                        });
                });

            modelBuilder.Entity("BurgerMasters.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BurgerMasters.Infrastructure.Data.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("BurgerMasters.Infrastructure.Data.Models.ReviewMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ReviewMessages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "453a4524-0cd1-46e6-abde-3219df401504",
                            ConcurrencyStamp = "936ee4ec-68c3-4824-b249-5988e0ccbc3f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a439eb91-8c15-4e7a-abef-7f4ebc004826",
                            ConcurrencyStamp = "143b209c-287a-4eda-bbc6-6d8745bb5012",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a0407939-a95d-40a2-8db6-020d349bd2bb",
                            RoleId = "453a4524-0cd1-46e6-abde-3219df401504"
                        },
                        new
                        {
                            UserId = "c30d2c49-d677-42b3-9295-a0b1dae91806",
                            RoleId = "453a4524-0cd1-46e6-abde-3219df401504"
                        },
                        new
                        {
                            UserId = "e130798b-a521-45ad-85df-b232eaaadc09",
                            RoleId = "a439eb91-8c15-4e7a-abef-7f4ebc004826"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BurgerMasters.Infrastructure.Data.Models.ApplicationUserMenuItem", b =>
                {
                    b.HasOne("BurgerMasters.Infrastructure.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("CartItems")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BurgerMasters.Infrastructure.Data.Models.MenuItem", "MenuItem")
                        .WithMany("ApplicationUserMenuItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("BurgerMasters.Infrastructure.Data.Models.MenuItem", b =>
                {
                    b.HasOne("BurgerMasters.Infrastructure.Data.Models.ItemType", "ItemType")
                        .WithMany("MenuItems")
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("BurgerMasters.Infrastructure.Data.Models.Order", b =>
                {
                    b.HasOne("BurgerMasters.Infrastructure.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BurgerMasters.Infrastructure.Data.Models.OrderDetail", b =>
                {
                    b.HasOne("BurgerMasters.Infrastructure.Data.Models.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BurgerMasters.Infrastructure.Data.Models.Order", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("BurgerMasters.Infrastructure.Data.Models.ReviewMessage", b =>
                {
                    b.HasOne("BurgerMasters.Infrastructure.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ReviewMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BurgerMasters.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BurgerMasters.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BurgerMasters.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BurgerMasters.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BurgerMasters.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("ReviewMessages");
                });

            modelBuilder.Entity("BurgerMasters.Infrastructure.Data.Models.ItemType", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("BurgerMasters.Infrastructure.Data.Models.MenuItem", b =>
                {
                    b.Navigation("ApplicationUserMenuItems");
                });

            modelBuilder.Entity("BurgerMasters.Infrastructure.Data.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
